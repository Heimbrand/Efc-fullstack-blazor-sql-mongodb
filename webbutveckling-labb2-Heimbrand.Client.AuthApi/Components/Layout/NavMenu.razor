@rendermode InteractiveServer
@implements IDisposable
@inject NavigationManager NavigationManager


<MudPaper Width="250px" Class="d-inline-flex py-3" Elevation="0" Style="margin">
    <MudNavMenu Class="mud-width-full">
        <AuthorizeView>
            <Authorized Context="auth">
                <MudNavLink Href="/" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>
                <MudNavLink Href="/Store" Icon="@Icons.Material.Filled.Store">Store</MudNavLink>
                <AuthorizeView Roles="User" Context="userAuth">
                    <Authorized>
                        <MudNavLink Href="/EditCustomer" Icon="@Icons.Material.Filled.Settings" IconColor="Color.Success">Edit Customer</MudNavLink>
                    </Authorized>
                </AuthorizeView>
            </Authorized>
            <NotAuthorized>
                <MudNavLink Href="/Account/Register" Icon="@Icons.Material.Filled.Settings" IconColor="Color.Success">Register Account</MudNavLink>
                <MudNavLink Href="/Account/Login" Icon="@Icons.Material.Filled.Settings" IconColor="Color.Success">Login</MudNavLink>
            </NotAuthorized>
        </AuthorizeView>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="Account/Manage">
                <span class="bi bi-person-fill-nav-menu" aria-hidden="true"></span>
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <form action="Account/Logout" method="post">
                <AntiforgeryToken />
                <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                <button type="submit" class="nav-link">
                    <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Logout
                </button>
            </form>
        </div>
        <MudDivider Class="my-2" />
        <AuthorizeView Roles="Admin">
            <MudNavGroup Title="Admin Settings" Icon="@Icons.Material.Filled.Settings" Expanded="@Expanded">
                <MudNavLink Href="/ProductCreateDelete" Icon="@Icons.Material.Filled.Settings" IconColor="Color.Success">Product Create/Delete</MudNavLink>
                <MudNavLink Href="/CustomerCreateDelete" Icon="@Icons.Material.Filled.Settings" IconColor="Color.Success">Customer Create/Delete</MudNavLink>
                <MudNavLink Href="/CategoryCreateDelete" Icon="@Icons.Material.Filled.Settings" IconColor="Color.Success">Category Create/Delete</MudNavLink>
                <MudNavLink Href="/EditProduct" Icon="@Icons.Material.Filled.Settings" IconColor="Color.Success">Edit Product</MudNavLink>
                <MudNavLink Href="/ProductInfo" Icon="@Icons.Material.Filled.Settings" IconColor="Color.Success">Product Info</MudNavLink>
                <MudNavLink Href="/CustomerInfo" Icon="@Icons.Material.Filled.Settings" IconColor="Color.Success">Customer info</MudNavLink>
            </MudNavGroup>
        </AuthorizeView>
       
    </MudNavMenu>
</MudPaper>

@code
{
    private bool Expanded { get; set; } = true;

    private void ToggleExpanded()
    {
        Expanded = !Expanded;
    }
    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }


}